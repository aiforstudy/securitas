// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from "@hey-api/client-axios"

import { client as _heyApiClient } from "./client.gen"
import type {
	AppControllerGetHelloData,
	CompanyControllerCreateData,
	CompanyControllerCreateResponse,
	CompanyControllerFindAllData,
	CompanyControllerFindAllResponse,
	CompanyControllerFindOneData,
	CompanyControllerFindOneResponse,
	CompanyControllerRemoveData,
	CompanyControllerRemoveResponse,
	CompanyControllerUpdateData,
	CompanyControllerUpdateResponse,
	DetectionControllerCreateData,
	DetectionControllerCreateIncomingDetectionData,
	DetectionControllerCreateIncomingDetectionResponse,
	DetectionControllerCreateResponse,
	DetectionControllerFindAllData,
	DetectionControllerFindAllResponse,
	DetectionControllerFindOneData,
	DetectionControllerFindOneResponse,
	DetectionControllerGetStatisticsData,
	DetectionControllerGetStatisticsResponse,
	DetectionControllerRemoveData,
	DetectionControllerSearchDetectionsData,
	DetectionControllerSearchDetectionsResponse,
	DetectionControllerUpdateData,
	DetectionControllerUpdateResponse,
	EngineControllerCreateData,
	EngineControllerCreateResponse,
	EngineControllerFindAllData,
	EngineControllerFindAllResponse,
	EngineControllerFindOneData,
	EngineControllerFindOneResponse,
	EngineControllerRemoveData,
	EngineControllerUpdateData,
	EngineControllerUpdateResponse,
	MonitorControllerCreateData,
	MonitorControllerCreateResponse,
	MonitorControllerFindAllData,
	MonitorControllerFindAllResponse,
	MonitorControllerFindOneData,
	MonitorControllerFindOneResponse,
	MonitorControllerRemoveData,
	MonitorControllerUpdateData,
	MonitorControllerUpdateResponse,
} from "./types.gen"

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
	TData,
	ThrowOnError
> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>
}

export const appControllerGetHello = <ThrowOnError extends boolean = false>(
	options?: Options<AppControllerGetHelloData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
		url: "/",
		...options,
	})
}

/**
 * Get all companies with pagination
 */
export const companyControllerFindAll = <ThrowOnError extends boolean = false>(
	options?: Options<CompanyControllerFindAllData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<CompanyControllerFindAllResponse, unknown, ThrowOnError>({
		url: "/companies",
		...options,
	})
}

/**
 * Create a new company
 */
export const companyControllerCreate = <ThrowOnError extends boolean = false>(
	options: Options<CompanyControllerCreateData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<CompanyControllerCreateResponse, unknown, ThrowOnError>({
		url: "/companies",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	})
}

/**
 * Delete a company
 */
export const companyControllerRemove = <ThrowOnError extends boolean = false>(
	options: Options<CompanyControllerRemoveData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<CompanyControllerRemoveResponse, unknown, ThrowOnError>({
		url: "/companies/{id}",
		...options,
	})
}

/**
 * Get a company by id
 */
export const companyControllerFindOne = <ThrowOnError extends boolean = false>(
	options: Options<CompanyControllerFindOneData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<CompanyControllerFindOneResponse, unknown, ThrowOnError>({
		url: "/companies/{id}",
		...options,
	})
}

/**
 * Update a company
 */
export const companyControllerUpdate = <ThrowOnError extends boolean = false>(
	options: Options<CompanyControllerUpdateData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).patch<CompanyControllerUpdateResponse, unknown, ThrowOnError>({
		url: "/companies/{id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	})
}

/**
 * Get all engines with pagination
 */
export const engineControllerFindAll = <ThrowOnError extends boolean = false>(
	options?: Options<EngineControllerFindAllData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<EngineControllerFindAllResponse, unknown, ThrowOnError>({
		url: "/engines",
		...options,
	})
}

/**
 * Create a new engine
 */
export const engineControllerCreate = <ThrowOnError extends boolean = false>(
	options: Options<EngineControllerCreateData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<EngineControllerCreateResponse, unknown, ThrowOnError>({
		url: "/engines",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	})
}

/**
 * Delete an engine
 */
export const engineControllerRemove = <ThrowOnError extends boolean = false>(
	options: Options<EngineControllerRemoveData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		url: "/engines/{id}",
		...options,
	})
}

/**
 * Get an engine by ID
 */
export const engineControllerFindOne = <ThrowOnError extends boolean = false>(
	options: Options<EngineControllerFindOneData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<EngineControllerFindOneResponse, unknown, ThrowOnError>({
		url: "/engines/{id}",
		...options,
	})
}

/**
 * Update an engine
 */
export const engineControllerUpdate = <ThrowOnError extends boolean = false>(
	options: Options<EngineControllerUpdateData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).patch<EngineControllerUpdateResponse, unknown, ThrowOnError>({
		url: "/engines/{id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	})
}

/**
 * Get all monitors
 */
export const monitorControllerFindAll = <ThrowOnError extends boolean = false>(
	options?: Options<MonitorControllerFindAllData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<MonitorControllerFindAllResponse, unknown, ThrowOnError>({
		url: "/monitors",
		...options,
	})
}

/**
 * Create a new monitor
 */
export const monitorControllerCreate = <ThrowOnError extends boolean = false>(
	options: Options<MonitorControllerCreateData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<MonitorControllerCreateResponse, unknown, ThrowOnError>({
		url: "/monitors",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	})
}

/**
 * Delete a monitor
 */
export const monitorControllerRemove = <ThrowOnError extends boolean = false>(
	options: Options<MonitorControllerRemoveData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		url: "/monitors/{id}",
		...options,
	})
}

/**
 * Get a monitor by id
 */
export const monitorControllerFindOne = <ThrowOnError extends boolean = false>(
	options: Options<MonitorControllerFindOneData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<MonitorControllerFindOneResponse, unknown, ThrowOnError>({
		url: "/monitors/{id}",
		...options,
	})
}

/**
 * Update a monitor
 */
export const monitorControllerUpdate = <ThrowOnError extends boolean = false>(
	options: Options<MonitorControllerUpdateData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).patch<MonitorControllerUpdateResponse, unknown, ThrowOnError>({
		url: "/monitors/{id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	})
}

/**
 * Get all detections
 */
export const detectionControllerFindAll = <ThrowOnError extends boolean = false>(
	options?: Options<DetectionControllerFindAllData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<DetectionControllerFindAllResponse, unknown, ThrowOnError>({
		url: "/detections",
		...options,
	})
}

/**
 * Create a new detection
 */
export const detectionControllerCreate = <ThrowOnError extends boolean = false>(
	options: Options<DetectionControllerCreateData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<DetectionControllerCreateResponse, unknown, ThrowOnError>({
		url: "/detections",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	})
}

/**
 * Create a new detection
 */
export const detectionControllerCreateIncomingDetection = <ThrowOnError extends boolean = false>(
	options: Options<DetectionControllerCreateIncomingDetectionData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		DetectionControllerCreateIncomingDetectionResponse,
		unknown,
		ThrowOnError
	>({
		url: "/detections/incoming",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	})
}

/**
 * Delete a detection
 */
export const detectionControllerRemove = <ThrowOnError extends boolean = false>(
	options: Options<DetectionControllerRemoveData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		url: "/detections/{id}",
		...options,
	})
}

/**
 * Get a detection by id and timestamp
 */
export const detectionControllerFindOne = <ThrowOnError extends boolean = false>(
	options: Options<DetectionControllerFindOneData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<DetectionControllerFindOneResponse, unknown, ThrowOnError>({
		url: "/detections/{id}",
		...options,
	})
}

/**
 * Update a detection
 */
export const detectionControllerUpdate = <ThrowOnError extends boolean = false>(
	options: Options<DetectionControllerUpdateData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).patch<DetectionControllerUpdateResponse, unknown, ThrowOnError>({
		url: "/detections/{id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	})
}

/**
 * Get detection statistics by engine
 */
export const detectionControllerGetStatistics = <ThrowOnError extends boolean = false>(
	options: Options<DetectionControllerGetStatisticsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<DetectionControllerGetStatisticsResponse, unknown, ThrowOnError>({
		url: "/detections/statistics",
		...options,
	})
}

/**
 * Search detections with advanced filters
 */
export const detectionControllerSearchDetections = <ThrowOnError extends boolean = false>(
	options?: Options<DetectionControllerSearchDetectionsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<DetectionControllerSearchDetectionsResponse, unknown, ThrowOnError>({
		url: "/detections/search",
		...options,
	})
}
